#!/usr/bin/env bash
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e

# For the test step concourse will set the following environment variables:
# SOURCE_PATH - path to component repository root directory.

if [[ -z "${SOURCE_PATH}" ]]; then
  export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
else
  export SOURCE_PATH="$(readlink -f "${SOURCE_PATH}")"
fi

VCS="github.com"
ORGANIZATION="gardener"
PROJECT="etcd-backup-restore"
REPOSITORY=${VCS}/${ORGANIZATION}/${PROJECT}
VERSION_FILE="$(readlink  -f "${SOURCE_PATH}/VERSION")"
VERSION="$(cat "${VERSION_FILE}")"

# The `go <cmd>` commands requires to see the target repository to be part of a
# Go workspace. Thus, if we are not yet in a Go workspace, let's create one
# temporarily by using symbolic links.
if [[ "${SOURCE_PATH}" != *"src/${REPOSITORY}" ]]; then
  SOURCE_SYMLINK_PATH="${SOURCE_PATH}/tmp/src/${REPOSITORY}"
  if [[ -d "${SOURCE_PATH}/tmp" ]]; then
    rm -rf "${SOURCE_PATH}/tmp"
  fi
  mkdir -p "${SOURCE_PATH}/tmp/src/${VCS}/${ORGANIZATION}"
  ln -s "${SOURCE_PATH}" "${SOURCE_SYMLINK_PATH}"
  cd "${SOURCE_SYMLINK_PATH}"

  export GOPATH="${SOURCE_PATH}/tmp"
  export GOBIN="${SOURCE_PATH}/tmp/bin"
  export PATH="${GOBIN}:${PATH}"
fi

##############################################################################

# Declare global variables
TEST_ID=
ETCD_VER=
ETCD_DATA_DIR=
TEST_DIR=

function setup_test_enviornment() {
  setup_ginkgo
  setup_etcd
  setup_etcbrctl
  setup_awscli
}

function setup_ginkgo(){
    echo "Installing Ginkgo..."
    go get -u github.com/onsi/ginkgo/ginkgo
    echo "Successfully installed Ginkgo."
}

function setup_etcd(){
    echo "Downloading and installing etcd..."
    export ETCD_VER=v3.3.8
    curl -L https://storage.googleapis.com/etcd/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz
    tar xzvf etcd-${ETCD_VER}-linux-amd64.tar.gz
    chmod +x ./etcd-${ETCD_VER}-linux-amd64/etcd
    chmod +x ./etcd-${ETCD_VER}-linux-amd64/etcdctl
    mv ./etcd-${ETCD_VER}-linux-amd64/etcdctl ${GOBIN}/etcdctl
    mv ./etcd-${ETCD_VER}-linux-amd64/etcd ${GOBIN}/etcd
    rm -rf ./etcd-${ETCD_VER}-linux-amd64
    rm -rf etcd-${ETCD_VER}-linux-amd64.tar.gz
    echo "Successfully installed etcd."
}

function setup_etcbrctl(){
    echo "Installing etcdbrctl..."
    go build \
    -v \
    -o ${GOBIN}/etcdbrctl \
    -ldflags "-w -X ${REPOSITORY}/pkg/version.Version=${VERSION}" \
    main.go
    chmod +x ${GOBIN}/etcdbrctl
    echo "Successfully installed etcdbrctl."
}

function setup_awscli() {
    echo "Installing awscli..."
    (apt update || apt update) && apt install -y python-pip
    pip install awscli
    echo "Successfully installed awscli."
}

function get_test_id() {
  git_commit=`git show -s --format="%H"`
  export TEST_ID=etcdbr-test-${git_commit}
  echo "Test id: ${TEST_ID}"
}

function create_etcd_data_directory() {
  export TEST_DIR=${PWD}/test/e2e_test_data
  export ETCD_DATA_DIR=${TEST_DIR}/etcd-data
  mkdir -p ${ETCD_DATA_DIR}
}
#############################
#        AWS Setup          #
#############################

function create_aws_secret() {
  echo "Fetching aws credentials from secret server..."
  ACCESS_KEY_ID=`/cc/utils/cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key access_key_id`
  SECRET_ACCESS_KEY=`/cc/utils/cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key secret_access_key`
  REGION=`/cc/utils/cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key region`
  echo "Successfully fetched aws credentials from secret server."


  echo "Creating aws credentials for API access..."
  mkdir ${HOME}/.aws
  cat << EOF > ${HOME}/.aws/credentials
[default]
aws_access_key_id = ${ACCESS_KEY_ID}
aws_secret_access_key = ${SECRET_ACCESS_KEY}
EOF
cat << EOF > ${HOME}/.aws/config
[default]
region = $REGION
EOF
  echo "Successfully created aws credentials."
}

function delete_aws_secret() {
  rm -rf ${HOME}/.aws
}

function create_s3_bucket() {
    aws s3api create-bucket --bucket ${TEST_ID} --region ${REGION} --create-bucket-configuration LocationConstraint=${REGION}
}

function setup-aws-infrastructure() {
  echo "Setting up AWS infrastructure..."
  create_aws_secret
  create_s3_bucket
  echo "AWS infrastructure setup completed."
}

function cleanup-aws-infrastructure() {
  aws s3 rb s3://${TEST_ID} --force
  delete_aws_secret
}

#############################
#        Azure Setup        #
#############################
function create_azure_secret() {
  echo "Creating Azure secret"
}

#############################
#        GCP Setup          #
#############################
function create_gcp_secret() {
echo "Creating GCP secret"
}

#############################
#        Openstack Setup    #
#############################
function create_openstack_secret() {
echo "Creating Openstack secret"
}

##############################################################################
function setup_test_cluster() {
  get_test_id
  setup-aws-infrastructure
  create_gcp_secret
  create_azure_secret
  create_openstack_secret
  create_etcd_data_directory
}

function cleanup_test_environment() {
  cleanup-aws-infrastructure
}

###############################################################################

setup_test_enviornment
echo "Setting up test cluster..."
setup_test_cluster

echo "Starting integration tests..."
cd test/e2e/integration

set +e
ginkgo -r
TEST_RESULT=$?
set -e

echo "Done with integration tests."

echo "Deleting test enviornment..."
cleanup_test_environment
echo "Successfully completed all tests."

exit $TEST_RESULT